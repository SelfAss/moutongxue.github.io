<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qwli7.blog.mapper.ArticleMapper">

    <resultMap id="BaseResultMap" type="Article">
        <id property="id" column="aid" />
        <result property="title" column="title" />
        <result property="content" column="content" />
        <result property="summary" column="summary" />
        <result property="alias" column="alias" />
        <result property="hits" column="hits" />
        <result property="comments" column="comments" />
        <result property="status" column="status" typeHandler="EnumOrdinalTypeHandler" />
        <result property="postAt" column="post_at" />
        <result property="createAt" column="create_at" />
        <result property="modifyAt" column="modify_at" />
        <result property="isPrivate" column="is_private" />
        <result property="allowComment" column="allow_comment" />
        <result property="featureImage" column="feature_image" />
        <result property="tags" column="tag_ids" typeHandler="com.qwli7.blog.mapper.TagsTypeHandler" />
        <association property="category" javaType="com.qwli7.blog.entity.Category">
            <id property="id" column="category_id" />
            <result property="name" column="category_name" />
        </association>
    </resultMap>

    <sql id="articlePageSql">
        select ba.id as aid,
               ba.title,
               ba.summary,
               ba.post_at,
               ba.create_at,
               ba.modify_at,
               ba.is_private,
               ba.alias,
               ba.hits,
               ba.comments,
               ba.status,
               ba.feature_image,
               ba.allow_comment,
               group_concat(batt.tag_id) as tag_ids,
               bc.id as category_id,
               bc.name as category_name

        from blog_article ba
        left join blog_category bc on ba.category_id = bc.id
        left join (select bt.id as tag_id, bt.name as tag_name, bat.article_id from blog_tag bt left join blog_article_tag bat on bt.id = bat.tag_id)
            batt on batt.article_id = ba.id
    </sql>

    <sql id="articleDetailSql">
        select ba.id as aid,
        ba.title, ba.content, ba.summary, ba.create_at, ba.post_at, ba.modify_at,
            ba.is_private, ba.alias, ba.hits, ba.comments, ba.status, ba.feature_image,
            ba.allow_comment,
            group_concat(batt.tag_id) as tag_ids,
            bc.id as category_id,
            bc.name as category_name
            from blog_article ba
        left join blog_category bc on ba.category_id = bc.id
        left join (select bt.id as tag_id, bt.name as tag_name, bat.article_id from blog_tag bt left join blog_article_tag bat on bt.id = bat.tag_id)
            batt on batt.article_id = ba.id
    </sql>

    <insert id="insert" parameterType="Article" keyProperty="id" keyColumn="id" useGeneratedKeys="true">
        insert into blog_article(title, content, hits, comments, alias, summary, create_at, modify_at,
                                 post_at, status, feature_image, allow_comment, is_private, category_id)
        values(#{title,jdbcType=VARCHAR}, #{content,jdbcType=VARCHAR}, #{hits,jdbcType=INTEGER}, #{comments,jdbcType=INTEGER},
            #{alias,jdbcType=VARCHAR}, #{summary,jdbcType=VARCHAR},
                      #{createAt}, #{modifyAt}, #{postAt}, #{status, javaType=ArticleStatus}, #{featureImage,jdbcType=VARCHAR},
                      #{allowComment,jdbcType=BOOLEAN}, #{isPrivate,jdbcType=BOOLEAN}, #{category.id,jdbcType=INTEGER})
    </insert>

    <select id="selectByAlias" parameterType="string" resultMap="BaseResultMap">
        <include refid="articleDetailSql" />
        where ba.alias = #{alias,jdbcType=VARCHAR} group by ba.id
    </select>

    <select id="selectById" parameterType="int" resultMap="BaseResultMap">
        <include refid="articleDetailSql" />
        where ba.id = #{id} group by ba.id
    </select>


    <select id="count" parameterType="HandledArticleQueryParam" resultType="int">
        select count(id) from blog_article
        <where>
            <if test="aids != null and !aids.isEmpty() > 0">
                and id in
                <foreach collection="aids" open="(" close=")" separator="," item="item">
                    #{item}
                </foreach>
            </if>
            <if test="statuses != null and !statuses.isEmpty()">
                and status in
                <foreach collection="statuses" item="status" separator="," close=")" open="(">
                    #{status, javaType=ArticleStatus}
                </foreach>
            </if>
            <if test="query != null and query != ''">
                and content like concat('%', #{query,jdbcType=VARCHAR}, '%')
                or summary like concat('%', #{query,jdbcType=VARCHAR}, '%')
            </if>
        </where>
    </select>

    <select id="selectPage" parameterType="HandledArticleQueryParam" resultMap="BaseResultMap">
        <include refid="articlePageSql" />

        <where>
            <if test="aids != null and !aids.isEmpty()">
                and ba.id in
                <foreach collection="aids" item="id" open="(" close=")" separator=",">
                    #{id}
                </foreach>
            </if>
            <if test="statuses != null and !statuses.isEmpty()">
                and ba.status in
                <foreach collection="statuses" item="status" open="(" close=")" separator=",">
                    #{status, javaType=ArticleStatus, typeHandler=EnumOrdinalTypeHandler}
                </foreach>
            </if>
            <if test="query != null and query != ''">
                and ba.title like #{query,jdbcType=VARCHAR}
                or ba.content like #{query,jdbcType=VARCHAR}
                or ba.summary like #{query,jdbcType=VARCHAR}
            </if>
        </where>

        group by ba.id

        order by ba.id desc
        limit #{start}, #{offset}
    </select>

    <update id="addHits">
        UPDATE blog_article SET hits = hits + #{hits} WHERE id = #{id}
    </update>

    <update id="updateHits">
        UPDATE blog_article SET hits = #{hits} WHERE id = #{id}
    </update>

    <update id="addComments">
        UPDATE blog_article SET comments = comments + #{comments} WHERE id = #{id}
    </update>

    <update id="updateComments">
        UPDATE blog_article SET comments = #{comments} WHERE id = #{id}
    </update>

    <delete id="deleteById" parameterType="int">
        delete from blog_article where id = #{id}
    </delete>

    <update id="update">
        UPDATE
            blog_article
            <set>
                <if test="content != null and content != ''">
                    content = #{content,jdbcType=VARCHAR},
                </if>
                <if test="title != null and title != ''">
                    title = #{title,jdbcType=VARCHAR},
                </if>
                <if test="isPrivate != null">
                    is_private = #{isPrivate,jdbcType=BOOLEAN},
                </if>
                <if test="summary != null and summary != ''">
                    summary = #{summary,jdbcType=VARCHAR},
                </if>
                <if test="status != null">
                    status = #{status, javaType=ArticleStatus, typeHandler=EnumOrdinalTypeHandler},
                </if>
                <if test="category != null">
                    category_id = #{category.id,jdbcType=INTEGER},
                </if>
                <if test="allowComment != null">
                    allow_comment = #{allowComment,jdbcType=BOOLEAN},
                </if>
                post_at = #{postAt},
                modify_at = now(),

                <if test="alias != null and alias != ''">
                    alias = #{alias,jdbcType=VARCHAR},
                </if>
                <if test="featureImage != null and featureImage != ''">
                    feature_image = #{featureImage,jdbcType=VARCHAR},
                </if>
            </set>
        WHERE id = #{id,jdbcType=INTEGER}
    </update>

    <select id="selectByIds" resultType="com.qwli7.blog.entity.Article">
        select * from blog_article where id in
        <where>
            <foreach collection="ids" item="item" separator="," close=")" open="(">
                #{item}
            </foreach>
        </where>
    </select>
</mapper>
