<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qwli7.blog.mapper.MomentMapper">

    <insert id="insert" parameterType="moment" keyColumn="id" keyProperty="id" useGeneratedKeys="true">
        insert into blog_moment(content, is_private, allow_comment, create_at, modify_at, hits, comments)
            values(#{content,jdbcType=VARCHAR}, #{isPrivate,jdbcType=BOOLEAN}, #{allowComment,jdbcType=BOOLEAN}, #{createAt},
                   #{modifyAt}, #{hits,jdbcType=INTEGER}, #{comments,jdbcType=INTEGER})
    </insert>

    <update id="update"  parameterType="Moment">
        update blog_moment
            <set>
                <if test="content != null  and content != ''">
                    content = #{content,jdbcType=VARCHAR},
                </if>
                <if test="isPrivate != null">
                    is_private = #{isPrivate,jdbcType=BOOLEAN},
                </if>
                <if test="allowComment != null">
                    allow_comment = #{allowComment,jdbcType=BOOLEAN},
                </if>
                <if test="hits != null">
                    hits = #{hits,jdbcType=INTEGER},
                </if>
                <if test="comments != null">
                    comments = #{comments,jdbcType=INTEGER},
                </if>
                modify_at = now(),
            </set>
            where id = #{id,jdbcType=INTEGER}
    </update>

    <select id="selectById" parameterType="integer" resultType="Moment">
        select id, content, is_private, allow_comment, create_at, modify_at, hits, comments from blog_moment
        where id = #{id}
    </select>

    <delete id="deleteById" parameterType="int">
        delete from blog_moment where id = #{id}
    </delete>

    <update id="updateHits">
        UPDATE blog_moment SET hits = #{hits} WHERE id = #{id}
    </update>

    <update id="addHits">
        UPDATE blog_moment set hits = hits + #{hits} WHERE id = #{id}
    </update>

    <update id="addComments">
        UPDATE blog_moment set comments = #{comments} WHERE id = #{id}
    </update>

    <update id="updateComments">
        UPDATE blog_moment set hits = comments + #{comments} WHERE id = #{id}
    </update>


    <select id="count" parameterType="MomentQueryParam" resultType="int">
        select count(id) from blog_moment
        <where>
            <if test="query != null and query != ''">
                content like concat('%', #{query,jdbcType=VARCHAR}, '%')
            </if>
        </where>
    </select>

    <select id="selectPage" parameterType="MomentQueryParam" resultType="Moment">
        select * from blog_moment
        <where>
            <if test="query != null and query != ''">
                content like concat('%', #{query,jdbcType=VARCHAR}, '%')
            </if>
        </where>
        <if test="orderDesc != null">
            order by create_at
            <choose>
                <when test="orderDesc">
                    desc
                </when>
            </choose>
        </if>
        limit #{start}, #{offset}
    </select>

    <select id="countArchive" resultType="int" parameterType="MomentQueryParam">
        SELECT count(1) FROM (
            SELECT DATE_FORMAT(create_at, '%Y-%m-%d') as date FROM blog_moment bm
            <if test="query != null and query != ''">
                bm.content LIKE concat('%', ${query,jdbcType=VARCHAR}, '%')
            </if>
            GROUP BY date)
        AS bmd
    </select>


    <resultMap id="ArchiveMomentResult" type="MomentArchive">
        <result column="archiveDate" property="archiveDate" />
        <collection property="moments" ofType="com.qwli7.blog.entity.Moment">
            <id property="id" column="id" />
            <result property="content" column="content" />
            <result property="hits" column="hits" />
            <result property="comments" column="comments" />
            <result property="allowComment" column="allow_comment" />
            <result property="isPrivate" column="is_private" />
            <result property="createAt" column="create_at" />
            <result property="modifyAt" column="modify_at" />
        </collection>
    </resultMap>
    <select id="selectArchivePage" parameterType="MomentQueryParam" resultMap="ArchiveMomentResult">
        select archive.archiveDate, bm.id, bm.content, bm.hits,
                bm.comments, bm.allow_comment, bm.create_at,
                bm.modify_at, bm.is_private from (
              select date_format(create_at, '%Y-%m-%d') as archiveDate
              from blog_moment
              <where>
                  <if test="query != null and query != ''">
                      and content like concat('%', #{query,jdbcType=VARCHAR}, '%')
                  </if>
              </where>
            group by archiveDate order by archiveDate desc
                              ) archive
        left join blog_moment bm on archive.archiveDate = DATE_FORMAT(bm.create_at, '%Y-%m-%d')
        <where>
            <if test="query != null and query != ''">
                bm.content like concat('%', #{query,jdbcType=VARCHAR}, '%')
            </if>
        </where>
        order by bm.create_at desc
        limit #{start}, #{offset}
    </select>

    <select id="selectPreMoment" resultType="com.qwli7.blog.entity.Moment">

    </select>
    <select id="selectNextMoment" resultType="com.qwli7.blog.entity.Moment">

    </select>

    <select id="selectLatestMoments" resultMap="ArchiveMomentResult">
        select archive.archiveDate, bm.id, bm.content, bm.hits,
               bm.comments, bm.allow_comment, bm.create_at,
               bm.modify_at, bm.is_private from (
                            select date_format(create_at, '%Y-%m-%d') as archiveDate
                            from blog_moment
        group by archiveDate order by archiveDate desc
                                            ) archive
                                            left join blog_moment bm on archive.archiveDate = DATE_FORMAT(bm.create_at, '%Y-%m-%d')
        order by bm.create_at desc limit 1
    </select>
</mapper>
